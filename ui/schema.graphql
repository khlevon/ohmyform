# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type AuthToken {
    accessToken: String!
    refreshToken: String!
}

type Button {
    action: String
    activeColor: String
    bgColor: String
    color: String
    id: ID!
    text: String
    url: String
}

type Colors {
    answer: String!
    background: String!
    button: String!
    buttonActive: String!
    buttonText: String!
    question: String!
}

type Deleted {
    id: String!
}

type Design {
    colors: Colors!
    font: String
}

type Device {
    language: String
    name: String!
    type: String!
}

type Form {
    admin: User
    created: DateTime!
    design: Design!
    endPage: Page!
    fields: [FormField!]!
    hooks: [FormHook!]!
    id: ID!
    isLive: Boolean!
    language: String!
    lastModified: DateTime
    notifications: [FormNotification!]!
    showFooter: Boolean!
    startPage: Page!
    title: String!
}

type FormField {
    description: String!
    id: ID!
    logic: [FormFieldLogic!]!
    options: [FormFieldOption!]!
    rating: FormFieldRating
    required: Boolean!
    slug: String
    title: String!
    type: String!
    value: String!
}

type FormFieldLogic {
    action: String!
    disable: Boolean
    enabled: Boolean!
    formula: String
    id: ID!
    jumpTo: ID
    require: Boolean
    visible: Boolean
}

type FormFieldOption {
    id: ID!
    key: String
    title: String
    value: String!
}

type FormFieldRating {
    shape: String
    steps: Int
}

type FormHook {
    enabled: Boolean!
    format: String
    id: ID!
    url: String
}

type FormNotification {
    enabled: Boolean!
    fromEmail: String
    fromField: String
    htmlTemplate: String
    id: ID!
    subject: String
    toEmail: String
    toField: String
}

type FormPager {
    entries: [Form!]!
    limit: Int!
    start: Int!
    total: Int!
}

type FormStatistic {
    total: Int!
}

type GeoLocation {
    city: String
    country: String
}

type Mutation {
    authLogin(password: String!, username: String!): AuthToken!
    authRegister(user: UserCreateInput!): AuthToken!
    createForm(form: FormCreateInput!): Form!
    deleteForm(id: ID!): Deleted!
    deleteUser(id: ID!): Deleted!
    submissionSetField(field: SubmissionSetFieldInput!, submission: ID!): SubmissionProgress!
    submissionStart(form: ID!, submission: SubmissionStartInput!): SubmissionProgress!
    updateForm(form: FormUpdateInput!): Form!
    updateProfile(user: ProfileUpdateInput!): Profile!
    updateUser(user: UserUpdateInput!): User!
}

type Page {
    buttonText: String
    buttons: [Button!]!
    id: ID!
    paragraph: String
    show: Boolean!
    title: String
}

type Profile {
    created: DateTime!
    email: String!
    firstName: String
    id: ID!
    language: String!
    lastModified: DateTime
    lastName: String
    roles: [String!]!
    username: String!
    verifiedEmail: Boolean!
}

type Query {
    getFormById(id: ID!): Form!
    getFormStatistic: FormStatistic!
    getSetting(key: ID!): Setting!
    getSettings: SettingPager!
    getSubmissionStatistic: SubmissionStatistic!
    getUserById(id: ID!): User!
    getUserStatistic: UserStatistic!
    listForms(limit: Int = 50, start: Int = 0): FormPager!
    listSubmissions(form: ID!, limit: Int = 50, start: Int = 0): SubmissionPager!
    listUsers(limit: Int = 50, start: Int = 0): UserPager!
    me: Profile!
    status: Version!
}

type Setting {
    isFalse: Boolean!
    isTrue: Boolean!
    key: ID!
    value: String
}

type SettingPager {
    entries: [Setting!]!
    limit: Int!
    start: Int!
    total: Int!
}

type Submission {
    created: DateTime!
    device: Device!
    fields: [SubmissionField!]!
    geoLocation: GeoLocation!
    id: ID!
    ipAddr: String!
    lastModified: DateTime
    percentageComplete: Float!
    timeElapsed: Float!
}

type SubmissionField {
    field: FormField
    id: ID!
    type: String!
    value: String!
}

type SubmissionPager {
    entries: [Submission!]!
    limit: Int!
    start: Int!
    total: Int!
}

type SubmissionProgress {
    created: DateTime!
    id: ID!
    lastModified: DateTime
    percentageComplete: Float!
    timeElapsed: Float!
}

type SubmissionStatistic {
    total: Int!
}

type User {
    created: DateTime!
    email: String!
    firstName: String
    id: ID!
    language: String!
    lastModified: DateTime
    lastName: String
    roles: [String!]!
    username: String!
    verifiedEmail: Boolean!
}

type UserPager {
    entries: [User!]!
    limit: Int!
    start: Int!
    total: Int!
}

type UserStatistic {
    total: Int!
}

type Version {
    version: String!
}

input ButtonInput {
    action: String
    activeColor: String
    bgColor: String
    color: String
    id: ID
    text: String
    url: String
}

input ColorsInput {
    answer: String!
    background: String!
    button: String!
    buttonActive: String!
    buttonText: String!
    question: String!
}

input DesignInput {
    colors: ColorsInput!
    font: String
}

input DeviceInput {
    language: String
    name: String!
    type: String!
}

input FormCreateInput {
    isLive: Boolean
    language: String!
    showFooter: Boolean
    title: String!
}

input FormFieldInput {
    description: String!
    disabled: Boolean
    id: ID!
    logic: [FormFieldLogicInput!]
    options: [FormFieldOptionInput!]
    rating: FormFieldRatingInput
    required: Boolean!
    slug: String
    title: String!
    type: String!
    value: String!
}

input FormFieldLogicInput {
    action: String
    disable: Boolean
    enabled: Boolean
    formula: String
    id: ID
    jumpTo: ID
    require: Boolean
    visible: Boolean
}

input FormFieldOptionInput {
    id: ID
    key: String
    title: String
    value: String!
}

input FormFieldRatingInput {
    shape: String
    steps: Int
}

input FormHookInput {
    enabled: Boolean!
    format: String
    id: ID!
    url: String
}

input FormNotificationInput {
    enabled: Boolean!
    fromEmail: String
    fromField: String
    htmlTemplate: String
    id: ID
    subject: String
    toEmail: String
    toField: String
}

input FormUpdateInput {
    design: DesignInput
    endPage: PageInput
    fields: [FormFieldInput!]
    hooks: [FormHookInput!]
    id: ID!
    isLive: Boolean
    language: String
    notifications: [FormNotificationInput!]
    showFooter: Boolean
    startPage: PageInput
    title: String
}

input PageInput {
    buttonText: String
    buttons: [ButtonInput!]!
    id: ID
    paragraph: String
    show: Boolean!
    title: String
}

input ProfileUpdateInput {
    email: String
    firstName: String
    id: ID!
    language: String
    lastName: String
    password: String
    username: String
}

input SubmissionSetFieldInput {
    data: String!
    field: ID!
    token: String!
}

input SubmissionStartInput {
    device: DeviceInput!
    token: String!
}

input UserCreateInput {
    email: String!
    firstName: String
    language: String
    lastName: String
    password: String!
    username: String!
}

input UserUpdateInput {
    email: String
    firstName: String
    id: ID!
    language: String
    lastName: String
    password: String
    roles: [String!]
    username: String
}


"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime
